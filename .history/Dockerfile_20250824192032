# Use Python 3.10 as base image
FROM python:3.10-slim

# Set working directory
WORKDIR /app

# Install essential dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gcc \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Fix Flask/Werkzeug compatibility issues
RUN pip uninstall -y flask werkzeug && \
    pip install flask==2.0.1 werkzeug==2.0.2 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Chrome (needed for undetected-chromedriver) - Simplified method
RUN apt-get update && apt-get install -y \
    gnupg \
    ca-certificates \
    && wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Copy the application code
COPY . .

# Ensure .env file is present (for local development)
# In production, use Railway environment variables
COPY .env* ./

# Create necessary directories
RUN mkdir -p logs

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PORT=8080
ENV CHROME_BIN=/usr/bin/google-chrome
ENV DISPLAY=:99

# Expose port for the API
EXPOSE 8080

# Command to run orchestrator (runs bot + API)
CMD ["python", "start_all.py"]
